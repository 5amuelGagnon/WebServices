package org.example;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Main {
    public static void main(String[] args) {
        SpringApplication.run(Main.class,args);
    }
}

----------------------------------------------------------------------------------------------

package org.example;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import java.util.ArrayList;
import java.util.List;

import static org.springframework.security.config.Customizer.withDefaults;

@RestController
public class FibonacciController{

    @GetMapping("/assignment2/services/fiborestservice/genfibonacci/{n}")
    public List<Long> genFibonacci(@PathVariable("n") int n) {
        if (n < 0 || n >= 100) {
            throw new IllegalArgumentException("Invalid input. n must be between 0 and 99 inclusive.");
        }
        List<Long> fibonacciSequence = new ArrayList<>();
        long a = 0, b = 1, c;
        fibonacciSequence.add(a);
        fibonacciSequence.add(b);
        for (int i = 0; i < n-2; i++) {
            c = a + b;
            fibonacciSequence.add(c);
            a = b;
            b = c;
        }
        return fibonacciSequence;
    }

    @GetMapping("/assignment2/services/fiborestservice/genfibo/{n}")
    public long genFibo(@PathVariable("n") int n) {
        if (n < 10 || n > 20) {
            throw new IllegalArgumentException("Invalid input. n must be between 10 and 20 inclusive.");
        }
        long a = 0, b = 1, c = 0;
        for (int i = 2; i < n; i++) {
            c = a + b;
            a = b;
            b = c;
        }
        return c;
    }

    @GetMapping("/assignment2/services/fiborestservice/calcfib6sum")
    public long calcFib6Sum() {
        long a = 0, b = 1, c = 0, sum = a + b;
        for (int i = 0; i < 4; i++) {
            c = a + b;
            sum += c;
            a = b;
            b = c;
        }
        return sum;
    }

    @GetMapping("/assignment2/services/fiborestservice/chkfib/{n}")
    public boolean chkFib(@PathVariable("n") int n) {
        if (n <= 0) {
            throw new IllegalArgumentException("Invalid input. n must be a positive integer excluding zero.");
        }
        long a = 0, b = 1, c = 0;
        while (c < n) {
            c = a + b;
            a = b;
            b = c;
        }
        return c == n;
    }

    @ExceptionHandler(IllegalArgumentException.class)
    public String handleIllegalArgumentException(IllegalArgumentException e) {
        return e.getMessage();
    }

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {


        http.csrf().disable()
                .authorizeRequests().anyRequest().authenticated()
                .and().httpBasic();

        return http.build();
    }
    @Autowired
    public void configureGlobal(AuthenticationManagerBuilder authentication)
            throws Exception
    {
        authentication.inMemoryAuthentication()
                .withUser("webservicesadmin")
                .password(passwordEncoder().encode("testpassword"))
                .authorities("ROLE_USER");
    }
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}


